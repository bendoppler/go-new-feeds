syntax = "proto3";

package friendspb;

option go_package = "news-feed/friendspb";

import "google/protobuf/timestamp.proto"; // Import for Timestamp type

message GetFriendsRequest {
  int32 user_id = 1;
  int32 limit = 2;
  int32 cursor = 3;
}

message User {
  int32 id = 1;
  string first_name = 2;
  string last_name = 3;
  string email = 4;
  string username = 5;
}
message GetFriendsResponse {
  repeated User users = 1;
  int32 next_cursor = 2;
}

message FollowUserRequest {
  int32 current_user_id = 1; // ID of the user who wants to follow
  int32 target_user_id = 2;   // ID of the user to be followed
}

message FollowUserResponse {
  string msg = 1; // Success message
}

message UnfollowUserRequest {
  int32 current_user_id = 1; // ID of the user who wants to unfollow
  int32 target_user_id = 2;   // ID of the user to be unfollowed
}

message UnfollowUserResponse {
  string msg = 1; // Success message
}

message Post {
  int32 id = 1; // ID of the post
  int32 user_id = 2; // User ID of the post creator
  string content_text = 3; // Text content of the post
  string content_image_path = 4; // Image path for the post content
  google.protobuf.Timestamp created_at = 5; // Creation timestamp of the post
}

message GetUserPostsResponse {
  repeated Post posts = 1; // List of posts
  int32 next_cursor = 2; // Cursor for the next page
}

// Define request message as before
message GetUserPostsRequest {
  int32 user_id = 1; // ID of the user whose posts are being fetched
  int32 limit = 2; // Limit on the number of posts to return
  int32 cursor = 3; // Cursor for pagination
}

service FriendsService {
  rpc GetFriends(GetFriendsRequest) returns (GetFriendsResponse);
  rpc FollowUser(FollowUserRequest) returns (FollowUserResponse);
  rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse);
  rpc GetUserPosts(GetUserPostsRequest) returns (GetUserPostsResponse);
}
